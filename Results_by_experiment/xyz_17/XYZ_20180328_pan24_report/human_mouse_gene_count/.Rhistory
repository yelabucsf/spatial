install.packages("hexbin")
library("hexbin")
library(ggplot2)
source("https://bioconductor.org/biocLite.R")
biocLite("affy")
library(affy)
library(RankProd)
biocLite("RankProd")
library(RankProd)
library(RColorBrewer)
library(gplots)
sel <- c("GSM228562", "GSM228563", "GSM228564", "GSM228565", "GSM228566", "GSM228567", "GSM228568", "GSM228569", "GSM228570", "GSM228571", "GSM228572", "GSM228573",
"GSM228574", "GSM228575", "GSM228576", "GSM228577", "GSM228578", "GSM228579", "GSM228580", "GSM228581", "GSM228582", "GSM228583", "GSM228584", "GSM228585",
"GSM228586", "GSM228587", "GSM228588", "GSM228589", "GSM228590", "GSM228591", "GSM228592", "GSM228593", "GSM228594", "GSM228597", "GSM228598", "GSM228601",
"GSM228604", "GSM228607", "GSM228608", "GSM228609", "GSM228612", "GSM228613", "GSM228616", "GSM228619", "GSM228622", "GSM228625", "GSM228628", "GSM228631",
"GSM228633", "GSM228634", "GSM228637", "GSM228639", "GSM228642", "GSM228645", "GSM228646", "GSM228649", "GSM228652", "GSM228655", "GSM228656", "GSM228659",
"GSM228660", "GSM228661", "GSM228662", "GSM228663", "GSM228664", "GSM228665", "GSM228666",  "GSM228667", "GSM228668", "GSM228669", "GSM228670", "GSM228671", "GSM228672",
"GSM228673", "GSM228674", "GSM228675", "GSM228676")
#download all the raw .CEL files from GEO into "GSE9006_RAW"
files <- paste("GSE9006_RAW/", sel, ".CEL", sep ="")
data <- justRMA(filenames=files)
#download GPL annotation from GGEO
annot <- read.delim("GPL96-15653.txt", comment.char = "#")
#download GPL annotation from GGEO
annot <- read.delim("GPL96-57554.txt", comment.char = "#")
#download GPL annotation from GGEO
annot <- read.delim("/Users/Christa.Caggiano/Documents/UCSF_year1/comp_immunology/lecture1/GPL96-57554.txt", comment.char = "#")
expr <- cbind(rownames(exprs(data)), exprs(data))
expr <- cbind(rownames(exprs(data)), exprs(data))
library(affy)
library(RankProd)
library(RColorBrewer)
library(gplots)
sel <- c("GSM228562", "GSM228563", "GSM228564", "GSM228565", "GSM228566", "GSM228567", "GSM228568", "GSM228569", "GSM228570", "GSM228571", "GSM228572", "GSM228573",
"GSM228574", "GSM228575", "GSM228576", "GSM228577", "GSM228578", "GSM228579", "GSM228580", "GSM228581", "GSM228582", "GSM228583", "GSM228584", "GSM228585",
"GSM228586", "GSM228587", "GSM228588", "GSM228589", "GSM228590", "GSM228591", "GSM228592", "GSM228593", "GSM228594", "GSM228597", "GSM228598", "GSM228601",
"GSM228604", "GSM228607", "GSM228608", "GSM228609", "GSM228612", "GSM228613", "GSM228616", "GSM228619", "GSM228622", "GSM228625", "GSM228628", "GSM228631",
"GSM228633", "GSM228634", "GSM228637", "GSM228639", "GSM228642", "GSM228645", "GSM228646", "GSM228649", "GSM228652", "GSM228655", "GSM228656", "GSM228659",
"GSM228660", "GSM228661", "GSM228662", "GSM228663", "GSM228664", "GSM228665", "GSM228666",  "GSM228667", "GSM228668", "GSM228669", "GSM228670", "GSM228671", "GSM228672",
"GSM228673", "GSM228674", "GSM228675", "GSM228676")
#download all the raw .CEL files from GEO into "GSE9006_RAW"
files <- paste("GSE9006_RAW/", sel, ".CEL", sep ="")
data <- justRMA(filenames=files)
#download GPL annotation from GGEO
annot <- read.delim("/Users/Christa.Caggiano/Documents/UCSF_year1/comp_immunology/lecture1/GPL96-57554.txt", comment.char = "#")
expr <- cbind(rownames(exprs(data)), exprs(data))
setwd("/Users/Christa.Caggiano/Documents/UCSF_year1/comp_immunology/lecture1")
#download all the raw .CEL files from GEO into "GSE9006_RAW"
files <- paste("GSE9006_RAW/", sel, ".CEL", sep ="")
data <- justRMA(filenames=files)
#download all the raw .CEL files from GEO into "GSE9006_RAW"
files <- paste( sel, ".CEL", sep ="")
data <- justRMA(filenames=files)
#download GPL annotation from GGEO
annot <- read.delim("/Users/Christa.Caggiano/Documents/UCSF_year1/comp_immunology/lecture1/GPL96-57554.txt", comment.char = "#")
expr <- cbind(rownames(exprs(data)), exprs(data))
expr_annot <- merge(expr, annot, by.x = 1, by.y = 1)
#download sample annotation from GEO
sample_annot <- read.delim("annot.txt")
#download sample annotation from GEO
sample_annot <- read.delim("gene_expression/annot.txt")
sample_annot_new <- sample_annot[grep("New$", sample_annot[,2]),]
cntrl_ids <- sample_annot[grep("Healthy$", sample_annot[,2]),1]
t1d_ids <- sample_annot_new[grep("T1D", sample_annot_new[,2]),1]
t2d_ids <- sample_annot_new[grep("T2D", sample_annot_new[,2]),1]
cntrl <- expr_annot[,paste(cntrl_ids, ".CEL", sep = "")]
t1d <- expr_annot[,paste(t1d_ids, ".CEL", sep = "")]
t2d <- expr_annot[,paste(t2d_ids, ".CEL", sep = "")]
#comparison - takes a while
temp <- cbind(t1d, cntrl)
temp_t1d <- as.numeric(as.matrix(temp))
dim(temp_t1d) <- dim(temp)
colnames(temp_t1d) <- colnames(temp)
cntrl_t1d <- RP(temp_t1d, cl=c(rep(0, dim(t1d)[2]), rep(1, dim(cntrl)[2])), rand = 123)
rm(list=ls())
s
setwd("/Users/Christa.Caggiano/Documents/UCSF_year1/Ye-rotation2/XYZ_20180328_pan24_report/human_mouse_gene_count")
spatial = read.csv("spatial_output.csv")
p = read.csv("spatial_output.csv")
length(unique(p$V2))
View(p)
p = read.csv("spatial_output.csv", header=F)
length(unique(p$V2))
sum(p$V6)
p_agg = aggregate(p$V6,list(p$V2),mean)
boxplot(p_agg$x)
View(p)
p_agg = aggregate(p$V6,list(p$V2),sum)
boxplot(p_agg$x)
View(p)
p_agg = aggregate(p$V6,list(p$V2),mean)
boxplot(p_agg$x)
p_agg = aggregate(p$V6,list(p$V2),sum)
boxplot(p_agg$x)
boxplot(p_agg$x, xlab="pancreas", ylab="number UMI/cell")
boxplot(p_agg$x, xlab="Mouse pancreas", ylab="number UMI/cell")
hist(p_agg$x, xlab="Mouse pancreas", ylab="number UMI/cell")
bar(p_agg$x, xlab="Mouse pancreas", ylab="number UMI/cell")
barplot(p_agg$x, xlab="Mouse pancreas", ylab="number UMI/cell")
hist(p_agg$x, breaks=100 xlab="Mouse pancreas", ylab="number UMI/cell")
hist(p_agg$x, breaks=100, xlab="Mouse pancreas", ylab="number UMI/cell")
hist(p_agg$x, breaks=200, xlab="Mouse pancreas", ylab="number UMI/cell")
hist(p_agg$x, breaks=200, xlab="Mouse pancreas", ylab="number UMI/cell", xlim=c(0,10000))
##input <- "~/Box\ Sync/XYZeq\ Project/XYZ_20180122_456_2/count.txt";
##input <- "~/Box\ Sync/XYZeq\ Project/XYZ_20180122_456_2/spatial_output.csv";
input <- "/Users/Christa.Caggiano/Documents/UCSF_year1/Ye-rotation2/XYZ_20180328_pan24_report/human_mouse_gene_count/spatial_output.csv";
mat <- fread(input);
require(data.table)
mat <- fread(input);
mat.agg <- aggregate(mat$V1, by=list(mat$V2,mat$V3), FUN=function(x) {log(sum(x+1))});
colnames(mat.agg) <- c("y","x","value")
mat.mouse.agg <- aggregate(mat$mouse, by=list(mat$x,mat$y), FUN=function(x) {sum(x)});
input <- "/Users/Christa.Caggiano/Desktop/Ye_lab_desktop/report/human_mouse_gene_count/spatial_output.csv";
mat <- fread(input);
## input
## should be 5 columns: gene, x, y, cell_id, count
library(imager);
library(data.table);
library(sp);
library(raster)
library(rgeos);
##library(reshape);
library(Matrix);
library(latticeExtra);
## output
make_grid <- function(x, cell_diameter) {
ext <- as(extent(x), "SpatialPolygons")
ext <- as(extent(x)+cell_diameter, "SpatialPolygons");
projection(ext) <- projection(x)
# generate array of hexagon centers
g <- spsample(ext,type = "hexagonal", offset = c(0,-0.5), cellsize=cell_diameter);
##                offset = c(0.5, 0.5))
# convert center points to hexagons
g <- HexPoints2SpatialPolygons(g)
# clean up feature IDs
row.names(g) <- as.character(1:length(g))
##browser();
return(g)
}
input <- "/Users/Christa.Caggiano/Desktop/Ye_lab_desktop/report/human_mouse_gene_count/spatial_output.csv";
input <- "/Users/Christa.Caggiano/Documents/UCSF_year1/Ye-rotation2/XYZ_20180328_pan24_report/human_mouse_gene_count/spatial_output.csv";
mat <- fread(input);
mat$value <- mat$mouse;
View(mat)
mat$V6 <- mat$mouse;
# @TODO remove log transform
mat.agg <- aggregate(mat$value, by=list(mat$x,mat$y), FUN=function(x) {log(sum(x+1))});
# @TODO remove log transform
mat.agg <- aggregate(mat$V6, by=list(mat$x,mat$y), FUN=function(x) {log(sum(x+1))});
View(mat)
input <- "/Users/Christa.Caggiano/Documents/UCSF_year1/Ye-rotation2/XYZ_20180328_pan24_report/human_mouse_gene_count/spatial_output.csv";
mat <- fread(input);
View(mat)
colnames(mat) <- c("gene", "cell", "x","y","pcr", "value")
mat$value <- mat$mouse;
View(mat)
# @TODO remove log transform
mat.agg <- aggregate(mat$value, by=list(mat$x,mat$y), FUN=function(x) {log(sum(x+1))});
mat <- fread(input);
colnames(mat) <- c("gene", "cell", "x","y","pcr", "value")
# @TODO remove log transform
mat.agg <- aggregate(mat$value, by=list(mat$x,mat$y), FUN=function(x) {log(sum(x+1))});
colnames(mat.agg) <- c("y","x","value")
View(mat.agg)
img <- as.cimg(mat.agg);
## let's make the grid based on what we know about the dimensions
##x.n <- 14;
##y.n <- 28;
x.n <- 18;
y.n <- 44;
mat.coords <- rbind(c(1,1),c(x.n,1),c(x.n,3*(y.n)/(2*sqrt(3))),c(1,3*(y.n)/(2*sqrt(3))));
img_area <- SpatialPolygons(list(Polygons(list(Polygon(mat.coords)), "x")));
img_grid <- make_grid(img_area, cell_diameter=1);
mat.agg.fill <- expand.grid(1:x.n, 1:y.n);
colnames(mat.agg.fill) <- c("x","y");
mat.agg.fill$value <- 0;
matched <- match(paste(mat.agg$y,mat.agg$x,sep="."),paste(mat.agg.fill$y,mat.agg.fill$x,sep="."));
mat.agg.fill$value[matched] <- mat.agg$value;
img_poly <- SpatialPolygonsDataFrame(img_grid, data.frame(mat.agg.fill$value), match.ID=F);
##plot(xlim=c(0,14),ylim=c(0,28));
spplot(img_poly);
mat <- fread(input);
colnames(mat) <- c("gene", "cell", "x","y","pcr", "value")
# @TODO remove log transform
mat.agg <- aggregate(mat$value, by=list(mat$x,mat$y), FUN=function(x) {log(sum(x+1))});
colnames(mat.agg) <- c("y","x","value")
img <- as.cimg(mat.agg);
## let's make the grid based on what we know about the dimensions
x.n <- 14;
y.n <- 28;
mat.coords <- rbind(c(1,1),c(x.n,1),c(x.n,3*(y.n)/(2*sqrt(3))),c(1,3*(y.n)/(2*sqrt(3))));
img_area <- SpatialPolygons(list(Polygons(list(Polygon(mat.coords)), "x")));
img_grid <- make_grid(img_area, cell_diameter=1);
mat.agg.fill <- expand.grid(1:x.n, 1:y.n);
colnames(mat.agg.fill) <- c("x","y");
mat.agg.fill$value <- 0;
matched <- match(paste(mat.agg$y,mat.agg$x,sep="."),paste(mat.agg.fill$y,mat.agg.fill$x,sep="."));
mat.agg.fill$value[matched] <- mat.agg$value;
img_poly <- SpatialPolygonsDataFrame(img_grid, data.frame(mat.agg.fill$value), match.ID=F);
##plot(xlim=c(0,14),ylim=c(0,28));
spplot(img_poly);
input <- "/Users/Christa.Caggiano/Documents/UCSF_year1/Ye-rotation2/XYZ_20180328_pan24_report/human_mouse_gene_count/spatial_output.csv";
mat <- fread(input);
colnames(mat) <- c("gene", "cell", "x","y","pcr", "value")
# @TODO remove log transform
mat.agg <- aggregate(mat$value, by=list(mat$x,mat$y), FUN=function(x) {log(sum(x+1))});
colnames(mat.agg) <- c("y","x","value")
img <- as.cimg(mat.agg);
## let's make the grid based on what we know about the dimensions
x.n <- 14;
y.n <- 28;
mat.coords <- rbind(c(1,1),c(x.n,1),c(x.n,3*(y.n)/(2*sqrt(3))),c(1,3*(y.n)/(2*sqrt(3))));
img_area <- SpatialPolygons(list(Polygons(list(Polygon(mat.coords)), "x")));
img_grid <- make_grid(img_area, cell_diameter=1);
mat.agg.fill <- expand.grid(1:x.n, 1:y.n);
# colnames(mat.agg.fill) <- c("x","y");
mat.agg.fill$value <- 0;
matched <- match(paste(mat.agg$y,mat.agg$x,sep="."),paste(mat.agg.fill$y,mat.agg.fill$x,sep="."));
mat.agg.fill$value[matched] <- mat.agg$value;
img_poly <- SpatialPolygonsDataFrame(img_grid, data.frame(mat.agg.fill$value), match.ID=F);
##plot(xlim=c(0,14),ylim=c(0,28));
spplot(img_poly);
input <- "/Users/Christa.Caggiano/Documents/UCSF_year1/Ye-rotation2/XYZ_20180328_pan24_report/human_mouse_gene_count/spatial_output.csv";
mat <- fread(input);
colnames(mat) <- c("gene", "cell", "x","y","pcr", "value")
# @TODO remove log transform
mat.agg <- aggregate(mat$value, by=list(mat$x,mat$y), FUN=function(x) {log(sum(x+1))});
colnames(mat.agg) <- c("y","x","value")
img <- as.cimg(mat.agg);
## let's make the grid based on what we know about the dimensions
x.n <- 14;
y.n <- 28;
mat.coords <- rbind(c(1,1),c(x.n,1),c(x.n,3*(y.n)/(2*sqrt(3))),c(1,3*(y.n)/(2*sqrt(3))));
img_area <- SpatialPolygons(list(Polygons(list(Polygon(mat.coords)), "x")));
img_grid <- make_grid(img_area, cell_diameter=1);
mat.agg.fill <- expand.grid(1:x.n, 1:y.n);
# colnames(mat.agg.fill) <- c("x","y");
mat.agg.fill$value <- 0;
matched <- match(paste(mat.agg$y,mat.agg$x,sep="."),paste(mat.agg.fill$y,mat.agg.fill$x,sep="."));
colnames(mat.agg.fill) <- c("x","y");
mat.agg.fill$value <- 0;
matched <- match(paste(mat.agg$y,mat.agg$x,sep="."),paste(mat.agg.fill$y,mat.agg.fill$x,sep="."));
mat.agg.fill$value[matched] <- mat.agg$value;
img_poly <- SpatialPolygonsDataFrame(img_grid, data.frame(mat.agg.fill$value), match.ID=F);
##plot(xlim=c(0,14),ylim=c(0,28));
spplot(img_poly);
mat <- fread(input);
colnames(mat) <- c("gene", "cell", "x","y","pcr", "value")
# @TODO remove log transform
mat.agg <- aggregate(mat$value, by=list(mat$x,mat$y), FUN=function(x) {log(sum(x+1))});
colnames(mat.agg) <- c("x","y","value")
img <- as.cimg(mat.agg);
## let's make the grid based on what we know about the dimensions
x.n <- 14;
y.n <- 28;
mat.coords <- rbind(c(1,1),c(x.n,1),c(x.n,3*(y.n)/(2*sqrt(3))),c(1,3*(y.n)/(2*sqrt(3))));
img_area <- SpatialPolygons(list(Polygons(list(Polygon(mat.coords)), "x")));
img_grid <- make_grid(img_area, cell_diameter=1);
mat.agg.fill <- expand.grid(1:x.n, 1:y.n);
colnames(mat.agg.fill) <- c("x","y");
mat.agg.fill$value <- 0;
matched <- match(paste(mat.agg$y,mat.agg$x,sep="."),paste(mat.agg.fill$y,mat.agg.fill$x,sep="."));
mat.agg.fill$value[matched] <- mat.agg$value;
View(p)
View(p_agg)
rm(list=ls())
setwd("/Users/Christa.Caggiano/Documents/UCSF_year1/Ye-rotation2/XYZ_20180328_pan24_report/human_mouse_gene_count"")
setwd("/Users/Christa.Caggiano/Documents/UCSF_year1/Ye-rotation2/XYZ_20180328_pan24_report/human_mouse_gene_count")
setwd("/Users/Christa.Caggiano/Documents/UCSF_year1/Ye-rotation2/XYZ_20180328_pan24_report/human_mouse_gene_count")
num = read.table("/Users/Christa.Caggiano/Desktop/Ye_lab_desktop/human_mouse_fraction.txt", header=T)
s = read.table("spatial_output_concat.csv", header=T)
install.packages("Rtsne")
library(Rtsne)
d <- dist(t(s))
d <- stats::dist(t(mat))
d <- stats::dist(t(s))
set.seed(0) # tsne has some stochastic steps (gradient descent) so need to set random
tsne_out <- Rtsne(d, is_distance=TRUE, perplexity=10, verbose = TRUE)
tsne_out <- Rtsne(d, is_distance=TRUE, perplexity=5, verbose = TRUE)
d <-(t(s))
tsne_out <- Rtsne(d, is_distance=TRUE, perplexity=10, verbose = TRUE)
install.packages("devtools")
devtools::install_github("JinmiaoChenLab/Rphenograph")
library("Rphenograph")
install.packages("devtools")
source("http:/bioconductor.org/workflows.R")
source("http://bioconductor.org/workflows.R")
workflowInstall("simpleSingleCell")
out10 <- plotTSNE(s, use_dimred="PCA", perplexity=10, colour_by="total_features",
rand_seed=100) + fontsize + ggtitle("Perplexity = 10")
library(SingleCellExperiment)
library(readxl)
library("simpleSingleCell")
library(scran)
install.packages("scran")
install.packages("Seurat")
library("Seurat")
