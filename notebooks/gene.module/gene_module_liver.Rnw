\documentclass{article}

\begin{document}

gene module is identified using scRNA-seq dataset, while the clustering of ST spots was performed on bulk ST data.  

<<package>>=
library("reticulate")
use_python("/Applications/anaconda3/bin/python3", required = T)
sc <- import("scanpy")

library(tidyverse)
# library(NMF)
@

Liver data is decontaminated by Yutong and preprocessed by Derek. 
`all_batches_mouse_only_raw_proximities.h5ad` is the output of 
`XYZeq_fig3_decontaminated_clustering.ipynb` and 
` XYZeq_fig3_decontaminated_spatial.ipynb` for adding the proximity score values.

<<>>=
setwd("~/Documents/projects/spatial-genomics")

# decont liver mat 
load("./data/decont_mat.rda")
dim(decont_mat) # 55287 genes, 10280 cells (the 59 contaminated genes were removed)
cell_names_raw <- make.names(colnames(decont_mat), allow_ = F)
gene_names <- rownames(decont_mat)

# selected cells
liver_h5ad <- sc$read_h5ad("./data/all_batches_mouse_only_raw_proximities.h5ad")
liver_h5ad # 5434 cells by 55287 genes
liver_cell_names <- make.names(liver_h5ad$obs_names$to_list(), allow_ = F)
liver_obs_raw <- liver_h5ad$obs
liver_obs_raw$cell_iden <- rownames(liver_obs_raw)

liver_mat <- decont_mat[grep("mm10", rownames(decont_mat)), # mouse genes only
                        colnames(decont_mat) %in% liver_cell_names] # selected cells only
dim(liver_mat) # 24917 genes by 5434 cells

# 2d coordinates
plate23_map <- read.csv("~/Documents/GitHub/spatial-genomics/data/plate23_map.csv", header=FALSE)
colnames(plate23_map) <- c("barcode", "X", "Y_raw")
plate23_map$Y <- plate23_map$Y_raw - (plate23_map$X %% 2) / 2
liver_obs1 <- merge(liver_obs_raw %>% select(- c(X, Y)), 
                    plate23_map %>% select(- Y_raw), 
                    by = "barcode")
liver_obs1 <- liver_obs1 %>%
  slice(match(colnames(liver_mat), cell_iden))
liver_obs1$location <- paste0(liver_obs1$batch, "_", liver_obs1$X, "_",
                              liver_obs1$Y)


# load tissue region annotations
liver_regions <- read.csv("~/Documents/GitHub/spatial-genomics/data/liver.regions.csv", 
                           row.names = 1)

colnames(liver_regions) <- c("batch", "X", "Y_raw", "region")
liver_regions$Y <- liver_regions$Y_raw - (liver_regions$X %% 2) / 2
liver_regions$location <- paste0(liver_regions$batch, "_", liver_regions$X, "_",
                                 liver_regions$Y)
liver_obs <- merge(liver_obs1, liver_regions %>% select(c("region", "location")),
                    by = "location")
liver_obs <- liver_obs %>% 
  slice(match(colnames(liver_mat), cell_iden))
# 0:tumor, 1:boundary, 2:liver/spleen (to be verified from George)

# sum(colnames(liver_mat) == liver_obs$cell_iden)
@

3. normalize and preprocess the data.
<<>>=
genes_to_keep <- which(rowSums(edgeR::cpm(liver_mat) > 5) >= 15)
# tradeSeq: gene by cell in cufflinksCountData
liver_mat_filter_raw <- liver_mat[genes_to_keep, ]
dim(liver_mat_filter_raw) # 14222 genes by 5434 cells

# 4.5 select top 2000 most variable genes
# convert to log 2 counts per million
liver_mat_log2 <- edgeR::cpm(liver_mat_filter_raw, log = TRUE)
dim(liver_mat_log2) # 14222 by 5434
Calc_CV <- function(x){sd(x) / mean(x)}
liver_gene_cv <- apply(liver_mat_log2, 1, Calc_CV)

num_genes <- 2000 # 2000 or 5000
liver_mat_filter <- liver_mat_log2[which(rank(liver_gene_cv) > length(liver_gene_cv) - num_genes), ]
dim(liver_mat_filter) # num_genes genes by 5434 cells
@

2. identify tumor-specific gene modules using NMF 
 - center the expression matrix individually by removing the mean expression 
   for each gene.
 - set negative values to zero.
 - perform sparse nonsmooth NMF using nsNMF function in NMF package (rank = 20). 
 
<<filter-tumor>>=
# sum(liver_obs$cell_iden == colnames(liver_mat_filter))
liver_tumor_mat_norm <- t(liver_mat_filter[, liver_obs$CellType == "mc38"])
dim(liver_tumor_mat_norm) # 2256 cells by 2000 genes
@

<<liver-NMF>>=
liver_tumor_mat_center <- liver_tumor_mat_norm - colMeans(liver_tumor_mat_norm)[col(liver_tumor_mat_norm)]
# range(colMeans(liver_tumor_mat_center))
liver_tumor_mat_nn <- liver_tumor_mat_center
liver_tumor_mat_nn[liver_tumor_mat_nn < 0] <- 0
dim(liver_tumor_mat_nn) # 2256 cells and 2000 genes
liver_tumor_mat_nn_sel <- liver_tumor_mat_nn[, colSums(liver_tumor_mat_nn) != 0]
dim(liver_tumor_mat_nn_sel) #  2256 cells by 2000 genes
@

<<>>=
# nmf_res_liver <- nmf(x = t(liver_tumor_mat_nn_sel), # feature by sample
#                      rank = 10, method = "nsNMF")
# saveRDS(nmf_res_liver, "~/Documents/projects/spatial-genomics/nmf_result/nmf_res_liver.rds")
nmf_res_liver <- readRDS("~/Documents/projects/spatial-genomics/nmf_result/nmf_res_liver.rds")
nmf_res_liver@fit
# <Object of class:NMFns>
# features: 2000 
# basis/rank: 10 
# samples: 2256 
# theta: 0.5 

s <- extractFeatures(nmf_res_liver, method = "max")
colnames(liver_tumor_mat_nn_sel)[s[[1]]]
colnames(liver_tumor_mat_nn_sel)[s[[2]]]
colnames(liver_tumor_mat_nn_sel)[s[[3]]]
colnames(liver_tumor_mat_nn_sel)[s[[4]]]
colnames(liver_tumor_mat_nn_sel)[s[[5]]]
colnames(liver_tumor_mat_nn_sel)[s[[6]]]
colnames(liver_tumor_mat_nn_sel)[s[[7]]]
colnames(liver_tumor_mat_nn_sel)[s[[8]]]
colnames(liver_tumor_mat_nn_sel)[s[[9]]]
colnames(liver_tumor_mat_nn_sel)[s[[10]]]

# tune ranks:
# if(requireNamespace("Biobase", quietly=TRUE)){
#   estim.r <- nmf(x = t(liver_tumor_mat_nn_sel), 
#                  rank = 10:15, nrun=10, seed=123456)
# # perform 10 runs for each value of r in range 2:6
#   if(requireNamespace("Biobase", quietly=TRUE)){
#     plot(estim.r)
#   }
# }
@

3. map tumor gene modules in spatial transcriptomics data

Use bulk ST data: 

<<>>=
dim(liver_mat_filter_raw) # 14222 genes by 5434 cells
dim(liver_obs) # 5434 cells by 23 annotations
sum(colnames(liver_mat_filter_raw) == liver_obs$cell_iden) # 5434

well_obs <- as.data.frame(unique(cbind(as.character(liver_obs$batch), liver_obs$X, 
                                       liver_obs$Y, liver_obs$location, 
                                       liver_obs$prox_2, liver_obs$region)))
colnames(well_obs) <- c("batch", "X", "Y", "location", "prox_2", "region")
well_obs$batch <- as.numeric(well_obs$batch)
well_obs$X <- as.numeric(well_obs$X)
well_obs$Y <- as.numeric(well_obs$Y)
well_obs$prox_2 <- as.numeric(well_obs$prox_2)
dim(well_obs) # 937 wells by 5 attributes


# ST data analysis
for(which_batch in 1:4){
  well_loc_set_batch <- unique(liver_obs[liver_obs$batch == (which_batch - 1), 
                                         "location"])
  length(well_loc_set_batch)
  
  # 1. construct bulk ST data matrix
  liver_bulk_mat_batch <- matrix(NA, nrow = nrow(liver_mat_filter_raw),
                           ncol = length(well_loc_set_batch))
  
  for(which_well in 1:length(well_loc_set_batch)){# for each well in the batch
    # first identify all the cells in a well
    cells_iden_each_well <- liver_obs[liver_obs$location == well_loc_set_batch[which_well],
                                      "cell_iden"]
    # sum over all the counts in each well
    liver_bulk_mat_batch[, which_well] <- rowSums(liver_mat_filter_raw[, 
                                                        cells_iden_each_well, 
                                                        drop = FALSE])
  }
  # sum(is.na(liver_bulk_mat_batch)) # 0
  
  rownames(liver_bulk_mat_batch) <- rownames(liver_mat_filter_raw)
  
  # 2. normalize UMI counts in each spot by the total transcript count
  # scale by the median number transcript count across all the spots
  med_sum_batch <- median(colSums(liver_bulk_mat_batch))
  liver_bulk_mat_norm_batch <- apply(liver_bulk_mat_batch, 2, function(j) j * med_sum_batch / sum(j))
  range(colSums(liver_bulk_mat_norm_batch))
  
  # 3. log 10 transformation with a pseudocount of 1
  liver_bulk_mat_log_batch <- log10(liver_bulk_mat_norm_batch + 1)
  dim(liver_bulk_mat_log_batch)
  
  # 4. standardize the genes in each module
  for(which_module in c(1:3, 5:10)){
   bulk_mat_module_batch <- t(liver_bulk_mat_log_batch[rownames(liver_bulk_mat_log_batch) %in% 
                                              colnames(liver_tumor_mat_nn_sel)[s[[which_module]]], ])
   dim(bulk_mat_module_batch)
   bulk_mat_module_scale_batch <- scale(bulk_mat_module_batch)
   # apply(bulk_mat_module_scale_batch, 2, mean)
   # apply(bulk_mat_module_scale_batch, 2, sd)
   
   # 5. sum the standardized, log-transformed expression of the genes in the model across all the tumor region spots, and find the mean
   # notice! tumor region spots only! PROX_2 < 0.5
   # identify cancer region spots, which is just all the cells with prox_2 < 0.5
   # the higher the proximity score is, the closer it is to the non-tumor region. 
   # the lower the proximity score is, the closer it is to the tumor region. 
   tumor_spots_loc <- unique(liver_obs[(liver_obs$location %in% well_loc_set_batch) & 
                                          (liver_obs$region == 2), "location"])
                                         # (liver_obs$prox_2 < 0.5), "location"])
   well_sum_batch <- rowSums(bulk_mat_module_scale_batch)[which(well_loc_set_batch %in% 
                                                                  tumor_spots_loc)]
   names(well_sum_batch) <- well_loc_set_batch[which(well_loc_set_batch %in% 
                                                       tumor_spots_loc)]
   
   length(well_sum_batch)
   # highly expressing module spots
   high_module_spot_loc_batch <- names(well_sum_batch)[which(well_sum_batch >= median(well_sum_batch))]
   # lowly expressing module spots
   low_module_spot_loc_batch <- names(well_sum_batch)[which(well_sum_batch < median(well_sum_batch))]
   
   well_obs_batch <- well_obs %>%
     filter(batch == which_batch - 1)
   
   high_module_spot_batch_idx <- which(well_obs_batch$location %in% high_module_spot_loc_batch)
   low_module_spot_batch_idx <- which(well_obs_batch$location %in% low_module_spot_loc_batch)
   
   p_den <- ggplot() +
     geom_density(data = data.frame(score = well_obs_batch[high_module_spot_batch_idx, "prox_2"]),
                  aes(x = score), color = "red") +
     geom_density(data = data.frame(score = well_obs_batch[low_module_spot_batch_idx, "prox_2"]),
                  aes(x = score), color = "blue") +
     theme_classic() +
     xlab("proximity score") +
     ggtitle(paste0(" Liver non-tumor region: Batch ", which_batch - 1, ", Module ", which_module,
                    ":\n Expressing module spots: red - high, blue - low"))
   
   print(p_den)
   ggsave(paste0("~/Documents/GitHub/spatial-genomics/fig/gene-module/liver/density_module",
                 which_module, "_batch", which_batch - 1, ".png"))
   
   
   hex_x <- cbind(well_obs_batch$X + 1/4, well_obs_batch$X + 1/2,
                  well_obs_batch$X + 1/4, well_obs_batch$X - 1/4,
                  well_obs_batch$X - 1/2, well_obs_batch$X - 1/4)
   hex_y <- cbind(well_obs_batch$Y + sqrt(3)/4, well_obs_batch$Y,
                  well_obs_batch$Y - sqrt(3)/4, well_obs_batch$Y - sqrt(3)/4,
                  well_obs_batch$Y, well_obs_batch$Y + sqrt(3)/4)
   # convert coordinates in long format
   hexdat_x <- reshape2::melt(cbind(id = 1:length(well_obs_batch$X),
                                    as.data.frame(hex_x)),
                              id.vars = "id", value.name = "x")
   hexdat_y <- reshape2::melt(cbind(id = 1:length(well_obs_batch$Y),
                                    as.data.frame(hex_y)),
                              id.vars = "id", value.name = "y")
   hex_data <- merge(hexdat_x, hexdat_y)
   
   p <- ggplot(hex_data, aes(x, -y)) +
     geom_polygon(aes(group = id), color = "wheat",
                  fill = ifelse(hex_data$id %in% high_module_spot_batch_idx, 
                                "red", ifelse(hex_data$id %in% low_module_spot_batch_idx,
                                              "blue", "grey"))) +
     ggtitle(paste0(" Liver non-tumor region: Batch ", which_batch - 1, ", Module ", which_module,
                    ":\n Expressing module spots: red - high, blue - low")) +
     theme_classic()
   print(p)
   ggsave(paste0("~/Documents/GitHub/spatial-genomics/fig/gene-module/liver/hexagon_module",
                 which_module, "_batch", which_batch - 1, ".png"))
  }
}
@

\end{document}