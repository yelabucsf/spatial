\documentclass{article}

\begin{document}

gene module is identified using scRNA-seq dataset, while the clustering of ST spots was performed on bulk ST data.  

<<package>>=
library("reticulate")
use_python("/Applications/anaconda3/bin/python3", required = T)
sc <- import("scanpy")

library(tidyverse)
library(Seurat)
library(NMF)
@

Spleen data is not decontaminated and preprocessed by Derek. 

<<>>=
setwd("~/Documents/projects/spatial-genomics")

# raw spleen data
spleen_raw_h5ad <- sc$read_h5ad("./data/spleen.concat.raw_counts.h5ad")
spleen_raw_h5ad # 7505 cells, 52025 genes
spleen_mat_raw <- spleen_raw_h5ad$X
rownames(spleen_mat_raw) <- make.names(spleen_raw_h5ad$obs_names$to_list(), allow_ = F)
colnames(spleen_mat_raw) <- spleen_raw_h5ad$var_names$to_list()

# selected cells with proximity score
spleen_preprocessed_h5ad <- sc$read_h5ad("./data/spleen.concat.adjustedXY.with_raw.with_prox_score.h5ad")
spleen_preprocessed_h5ad # 3394 cells, 52025 genes
spleen_cell_names <- make.names(spleen_preprocessed_h5ad$obs_names$to_list(), allow_ = F)
spleen_obs_raw <- spleen_preprocessed_h5ad$obs
spleen_obs_raw$cell_iden <- rownames(spleen_obs_raw) <- make.names(rownames(spleen_obs_raw), allow_ = F)
summary(spleen_obs_raw$prox_score)

sum(spleen_raw_h5ad$var_names$to_list() == spleen_preprocessed_h5ad$var_names$to_list())
spleen_mat_t <- spleen_mat_raw[rownames(spleen_mat_raw) %in%spleen_cell_names,
                                  # selected cells only
                                grep("mm10", colnames(spleen_mat_raw))]# mouse genes only
spleen_mat <- t(spleen_mat_t)
dim(spleen_mat) # 22810 genes by 3394 cells

# 2d coordinates
plate23_map <- read.csv("~/Documents/GitHub/spatial-genomics/data/plate23_map.csv", header=FALSE)
colnames(plate23_map) <- c("barcode", "X", "Y_raw")
plate23_map$Y <- plate23_map$Y_raw - (plate23_map$X %% 2) / 2
spleen_obs1 <- merge(spleen_obs_raw %>% select(- c(X, Y)), 
                       plate23_map %>% select(- Y_raw), 
                       by = "barcode")
spleen_obs1 <- spleen_obs1 %>%
  slice(match(colnames(spleen_mat), cell_iden))
spleen_obs1$location <- paste0(spleen_obs1$batch, "_", spleen_obs1$X, "_",
                              spleen_obs1$Y)

# load region annotations
spleen_regions <- read.csv("~/Documents/GitHub/spatial-genomics/data/spleen.regions.csv", 
                           row.names = 1)

colnames(spleen_regions) <- c("batch", "X", "Y_raw", "region")
spleen_regions$Y <- spleen_regions$Y_raw - (spleen_regions$X %% 2) / 2
spleen_regions$location <- paste0(spleen_regions$batch, "_", spleen_regions$X, "_",
                              spleen_regions$Y)
spleen_obs <- merge(spleen_obs1, spleen_regions %>% select(c("region", "location")),
                    by = "location")
# 0:tumor, 1:boundary, 2:liver/spleen (verified from George)
spleen_obs <- spleen_obs %>% 
  slice(match(colnames(spleen_mat), cell_iden))

spleen_obs <- spleen_obs %>%
  mutate(batch_name = case_when(batch == 0 ~ "S10C",
                                batch == 1 ~ "S20C2",
                                batch == 2 ~ "S20C1", 
                                TRUE ~ "S15C"))

sum(colnames(spleen_mat) == spleen_obs$cell_iden) # 3394

@

Use sctransform in Seurat:
<<>>=
rownames(spleen_obs) <- spleen_obs$cell_iden
colnames(spleen_obs) <- make.names(colnames(spleen_obs), allow_ = F)
# sctranform normalization replaces NormalizeData, ScaleData, and FindVariableFeatures.

dim(spleen_mat) # 22810 genes by 3394 cells
sum(colnames(spleen_mat) == spleen_obs$cell.iden) # 3394

spleen_myeloid_sc_obj_sct <- CreateSeuratObject(
  counts = spleen_mat[, spleen_obs$CellType == "Macrophage"], 
  meta.data = spleen_obs[spleen_obs$CellType == "Macrophage", ],
  project = "spleen_myeloid_sc", 
  min.cells = 5, 
  min.features = 100)

spleen_myeloid_sc_obj_sct
# An object of class Seurat 
# 10049 features across 649 samples within 1 assay 
# Active assay: RNA (10049 features, 0 variable features)

spleen_myeloid_sc_obj_sct <- SCTransform(
  spleen_myeloid_sc_obj_sct, 
  vars.to.regress = c("n.counts", "batch.name", "percent.mito.mouse"),
  return.only.var.genes = F)
spleen_myeloid_sc_obj_sct
# An object of class Seurat 
# 20098 features across 649 samples within 2 assays 
# Active assay: SCT (10049 features, 3000 variable features)
#  1 other assay present: RNA
@

<<>>=
# the residuals (normalized values) and used as PCA input:
dim(spleen_myeloid_sc_obj_sct[["SCT"]]@scale.data) # 10049 genes and 649 cells
# the corrected UMI counts:
dim(spleen_myeloid_sc_obj_sct[["SCT"]]@counts) # 10049 genes and 649 cells
# log-normalized version of the corrected UMI counts:
dim(spleen_myeloid_sc_obj_sct[["SCT"]]@data) # 10049 genes and 649 cells
@

2. identify tumor-specific gene modules using NMF 
 - center the expression matrix individually by removing the mean expression 
   for each gene.
 - set negative values to zero.
 - perform sparse nonsmooth NMF using nsNMF function in NMF package (rank = 20). 
 
<<>>=
spleen_myeloid_mat_center <- spleen_myeloid_sc_obj_sct[["SCT"]]@scale.data
range(rowMeans(spleen_myeloid_mat_center)) # per gene
summary(as.numeric(spleen_myeloid_mat_center))
plot(density(as.numeric(spleen_myeloid_mat_center)), 
     main = "value density")
@

<<nmf>>=
spleen_myeloid_mat_nn <- spleen_myeloid_mat_center
spleen_myeloid_mat_nn[spleen_myeloid_mat_nn < 0] <- 0
dim(spleen_myeloid_mat_nn) # 10049 genes by 649 cells
# which(rowSums(spleen_myeloid_mat_nn) == 0)

nmf_res_spleen_myeloid <- nmf(x = spleen_myeloid_mat_nn, # feature by sample
                     rank = 20, method = "brunet")
nmf_res_spleen_myeloid
  # Timing:
  #     user   system  elapsed 
  # 1104.775    7.034 1118.311 
@

<<>>=
# saveRDS(nmf_res_spleen_myeloid, "~/Documents/projects/spatial-genomics/nmf_result/seurat_nmf_res_spleen_myeloid.rds")
nmf_res_spleen_myeloid <- readRDS("~/Documents/projects/spatial-genomics/nmf_result/seurat_nmf_res_spleen_myeloid.rds")
nmf_res_spleen_myeloid@fit

# saveRDS(spleen_myeloid_mat_nn, "~/Documents/projects/spatial-genomics/nmf_result/spleen_myeloid_mat_nn.rds")
# spleen_myeloid_mat_nn <- readRDS("~/Documents/projects/spatial-genomics/nmf_result/spleen_myeloid_mat_nn.rds")

s_spleen <- extractFeatures(nmf_res_spleen_myeloid, method = "max")

# tune ranks:
# if(requireNamespace("Biobase", quietly=TRUE)){
#   estim.r <- nmf(x = t(liver_tumor_mat_nn_sel), 
#                  rank = 10:15, nrun=10, seed=123456)
# # perform 10 runs for each value of r in range 2:6
#   if(requireNamespace("Biobase", quietly=TRUE)){
#     plot(estim.r)
#   }
# }
@

3. map tumor gene modules in spatial transcriptomics data

 To cluster the ST cancer region spots based on the expression of the stress 
 response gene module (related to Fig. 5b,c), we first summed the standardized,
 log10-transformed expression of the genes in this module across the cancer 
 region ST spots. 
 
 We then annotated spots with an expression level above the median as the highly
 expressing module spots, and the spots below the median as the lowly expressing
 module spots. Next, we identified genes specific to the highly expressing 
 module spots with a two-tailed t-test, and took the 500 most-significant genes 
 by P value for subsequent MIA cell type enrichment. For determining the 
 enrichment of inflammatory fibroblasts in these regions, we obtained the 
 scRNA-seq-defined inflammatory fibroblast signature from Elyada et al.

Use bulk ST data: 

<<>>=
spleen_myeloid_data_mat <- spleen_myeloid_sc_obj_sct[["SCT"]]@data
spleen_myeloid_obs <- spleen_myeloid_sc_obj_sct@meta.data

dim(spleen_myeloid_data_mat) # 10049 genes by 649 cells
dim(spleen_myeloid_obs) # 649 cells by 28 annotations
sum(colnames(spleen_myeloid_data_mat) == spleen_myeloid_obs$cell.iden) # 649

well_myeloid_obs <- as.data.frame(unique(cbind(
  as.character(spleen_myeloid_obs$batch), spleen_myeloid_obs$X, 
  spleen_myeloid_obs$Y, spleen_myeloid_obs$location, 
  spleen_myeloid_obs$prox.score, spleen_myeloid_obs$region)))
colnames(well_myeloid_obs) <- c("batch", "X", "Y", "location",
                                "prox_score", "region")
well_myeloid_obs$batch <- as.numeric(well_myeloid_obs$batch)
well_myeloid_obs$X <- as.numeric(well_myeloid_obs$X)
well_myeloid_obs$Y <- as.numeric(well_myeloid_obs$Y)
well_myeloid_obs$prox_score <- as.numeric(well_myeloid_obs$prox_score)
dim(well_myeloid_obs) # 187 wells by 6 attributes


all_well_obs <- as.data.frame(unique(cbind(
  as.character(spleen_obs$batch), spleen_obs$X, 
  spleen_obs$Y, spleen_obs$location, 
  spleen_obs$prox.score, spleen_obs$region)))
colnames(all_well_obs) <- c("batch", "X", "Y", "location",
                                "prox_score", "region")
all_well_obs$batch <- as.numeric(all_well_obs$batch)
all_well_obs$X <- as.numeric(all_well_obs$X)
all_well_obs$Y <- as.numeric(all_well_obs$Y)
all_well_obs$prox_score <- as.numeric(all_well_obs$prox_score)
dim(all_well_obs) # 454 wells by 6 attributes

batch_iden <- c("S10C", "S20C2", "S15C", "S20C1")

# ST data analysis
for(which_batch in 1:4){
  well_loc_set_batch <- unique(
    spleen_myeloid_obs[spleen_myeloid_obs$batch == (which_batch - 1), 
                                         "location"])
  length(well_loc_set_batch)
  
  # 1. construct bulk ST data matrix
  spleen_bulk_mat_batch <- matrix(NA, nrow = nrow(spleen_myeloid_data_mat),
                           ncol = length(well_loc_set_batch))
  
  for(which_well in 1:length(well_loc_set_batch)){# for each well in the batch
    # first identify all the cells in a well
    cells_iden_each_well <- spleen_myeloid_obs[spleen_myeloid_obs$location == 
                                                 well_loc_set_batch[which_well],
                                               "cell.iden"]
    # sum over all the counts in each well
    spleen_bulk_mat_batch[, which_well] <- rowSums(spleen_myeloid_data_mat[, 
                                                        cells_iden_each_well, 
                                                        drop = FALSE])
  }
  # sum(is.na(spleen_bulk_mat_batch)) # 0
  # dim(spleen_bulk_mat_batch) # 10049 genes by 20 wells in this batch
  
  rownames(spleen_bulk_mat_batch) <- rownames(spleen_myeloid_data_mat)
  
  for(which_module in c(8, 9)){
   bulk_mat_module_batch <- t(spleen_bulk_mat_batch[
     rownames(spleen_bulk_mat_batch) %in% 
       rownames(spleen_myeloid_mat_nn)[s[[which_module]]], ])
   dim(bulk_mat_module_batch) # well by gene
   
   # 5. sum the standardized, log-transformed expression of the genes in the model across all the tumor region spots, and find the mean
   # identify cancer region spots, which is just all the cells with region == 0
   tumor_spots_loc <- unique(spleen_myeloid_obs[(
     spleen_myeloid_obs$location %in% well_loc_set_batch) & 
       (spleen_myeloid_obs$region != 0), "location"])
   
   well_sum_batch <- rowSums(bulk_mat_module_batch)[
     which(well_loc_set_batch %in% tumor_spots_loc)]
   names(well_sum_batch) <- well_loc_set_batch[which(well_loc_set_batch %in% 
                                                       tumor_spots_loc)]
   length(well_sum_batch)
   # highly expressing module spots
   high_module_spot_loc_batch <- names(well_sum_batch)[which(well_sum_batch >= median(well_sum_batch))]
   # lowly expressing module spots
   low_module_spot_loc_batch <- names(well_sum_batch)[which(well_sum_batch < median(well_sum_batch))]
   
   well_obs_batch <- well_myeloid_obs %>%
     filter(batch == which_batch - 1)
   
   all_well_obs_batch <- all_well_obs %>%
     filter(batch == which_batch - 1)
   
   high_module_spot_batch_idx <- which(well_obs_batch$location %in% 
                                         high_module_spot_loc_batch)
   low_module_spot_batch_idx <- which(well_obs_batch$location %in% 
                                        low_module_spot_loc_batch)
   
   p_den <- ggplot() +
     geom_density(data = data.frame(score = well_obs_batch[high_module_spot_batch_idx, "prox_score"]),
                  aes(x = score), color = "red") +
     geom_density(data = data.frame(score = well_obs_batch[low_module_spot_batch_idx, "prox_score"]),
                  aes(x = score), color = "blue") +
     theme_classic() +
     xlab("proximity score") +
     ggtitle(paste0(" Spleen tumor region: Batch ", batch_iden[which_batch], ", Module ", which_module,
                    ":\n Expressing module spots: red - high, blue - low"))
   
   print(p_den)
   ggsave(paste0("~/Documents/GitHub/spatial-genomics/fig/gene-module/spleen/density_module_",
                 which_module, "_batch", batch_iden[which_batch], ".png"))
   
   
   hex_x <- cbind(well_obs_batch$X + 1/4, well_obs_batch$X + 1/2,
                  well_obs_batch$X + 1/4, well_obs_batch$X - 1/4,
                  well_obs_batch$X - 1/2, well_obs_batch$X - 1/4)
   hex_y <- cbind(well_obs_batch$Y + sqrt(3)/4, well_obs_batch$Y,
                  well_obs_batch$Y - sqrt(3)/4, well_obs_batch$Y - sqrt(3)/4,
                  well_obs_batch$Y, well_obs_batch$Y + sqrt(3)/4)
   # convert coordinates in long format
   hexdat_x <- reshape2::melt(cbind(id = 1:length(well_obs_batch$X),
                                    as.data.frame(hex_x)),
                              id.vars = "id", value.name = "x")
   hexdat_y <- reshape2::melt(cbind(id = 1:length(well_obs_batch$Y),
                                    as.data.frame(hex_y)),
                              id.vars = "id", value.name = "y")
   hex_data <- merge(hexdat_x, hexdat_y)
   
   
   all_hex_x <- cbind(all_well_obs_batch$X + 1/4, all_well_obs_batch$X + 1/2,
                      all_well_obs_batch$X + 1/4, all_well_obs_batch$X - 1/4,
                      all_well_obs_batch$X - 1/2, all_well_obs_batch$X - 1/4)
   all_hex_y <- cbind(all_well_obs_batch$Y + sqrt(3)/4, all_well_obs_batch$Y,
                      all_well_obs_batch$Y - sqrt(3)/4, all_well_obs_batch$Y - sqrt(3)/4,
                      all_well_obs_batch$Y, all_well_obs_batch$Y + sqrt(3)/4)
   # convert coordinates in long format
   all_hexdat_x <- reshape2::melt(cbind(id = 1:length(all_well_obs_batch$X),
                                    as.data.frame(all_hex_x)),
                              id.vars = "id", value.name = "x")
   all_hexdat_y <- reshape2::melt(cbind(id = 1:length(all_well_obs_batch$Y),
                                    as.data.frame(all_hex_y)),
                              id.vars = "id", value.name = "y")
   all_hex_data <- merge(all_hexdat_x, all_hexdat_y)
   
   
   
   p <- ggplot(hex_data, aes(x, -y)) +
     geom_polygon(data = all_hex_data, aes(x, -y, group = id)) +
     geom_polygon(data = hex_data, aes(x, -y, group = id), color = "wheat",
                  fill = ifelse(hex_data$id %in% high_module_spot_batch_idx, 
                                "red", ifelse(hex_data$id %in% low_module_spot_batch_idx,
                                              "blue", "grey"))) +
     ggtitle(paste0(" Spleen tumor region: Batch ", batch_iden[which_batch], ", Module ", which_module,
                    ":\n Expressing module spots: red - high, blue - low")) +
     theme_classic()
   print(p)
   ggsave(paste0("~/Documents/GitHub/spatial-genomics/fig/gene-module/spleen/hexagon_module_",
                 which_module, "_batch", batch_iden[which_batch], ".png"))
  }
}
@

\end{document}